import numpy as np
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import scipy.optimize as optimization

NUM_PORTFOLIOS = 700000

RISK_FREE_RATE = 0.03

BENCHMARK = 'SPY'

CAP = 0.2

stocks = ['AAPL', 'WMT', 'TSLA','AMZN', 'GE', 'DB', 'MSFT' , 'UNH', 'JPM', 'BRK-B','XOM','JNJ']

start_date = '2015-01-01'
end_date = '2025-01-01'

def download_data():
    stock_data = {}

    for stock in stocks:
        ticker = yf.Ticker(stock)
        stock_data[stock] = ticker.history(start=start_date, end=end_date)['Close']

    return pd.DataFrame(stock_data)

def show_data(data):
    data.plot(figsize=(10, 6))
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.title('Stock Price History')
    plt.show()

def calculate_return(data):
    log_return = np.log(data/data.shift(1))
    return log_return.dropna()

def show_statistics(returns):
    print(returns.mean() * 252)
    print(returns.cov() * 252)

def show_mean_and_variance(returns, weights):
    portfolio_log_return = np.sum(returns.mean() * weights * 252)
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))

    portfolio_arithmetic_return = np.exp(portfolio_log_return) -1

    print("Expected Portfolio Return:", portfolio_arithmetic_return)
    print("Expected Portfolio Volatility:", portfolio_volatility)

def generate_portfolio(returns):

    portfolio_weights = []
    portfolio_means = []
    portfolio_risks = []

    for _ in range(NUM_PORTFOLIOS):

        w = np.random.random(len(stocks))
        w /= np.sum(w)
        portfolio_weights.append(w)
        port_log_return = np.sum(returns.mean() * w) * 252
        portfolio_means.append(np.exp(port_log_return) - 1)
        portfolio_risks.append(np.sqrt(np.dot(w.T, np.dot(returns.cov() * 252, w))))

    return np.array(portfolio_weights), np.array(portfolio_means), np.array(portfolio_risks)

def show_portfolios(volatilities, returns):
    colors = [(0, "midnightblue"),(0.1, "darkblue"),(0.2, "blue"),(0.4, "cyan"),(0.45, "aquamarine"),(0.5, "lime"),(0.55, "yellow"),(0.6, "orange"),(0.8, "red"),(0.9, "darkred"),(1, "maroon")]
    cmap = LinearSegmentedColormap.from_list("colors", colors)
    plt.figure(figsize=(10, 6))
    plt.scatter(volatilities, returns, c = returns/volatilities, cmap = cmap, marker = 'o', edgecolor = 'black')
    plt.grid(True)
    plt.xlabel('Expected Volatility')
    plt.ylabel('Expected Return')
    plt.colorbar(label = 'Sharpe Ratio')
    plt.show()

def statistics(weights, returns):
    portfolio_log_return = np.sum(returns.mean() * weights) * 252
    portfolio_volatility = np.sqrt(np.dot(weights.T,np.dot(returns.cov() * 252, weights)))
    portfolio_arithmetic_return = np.exp(portfolio_log_return) - 1
    sharpe_ratio = (portfolio_arithmetic_return - RISK_FREE_RATE)/ portfolio_volatility
    return np.array([portfolio_arithmetic_return, portfolio_volatility, sharpe_ratio])

def download_data_benchmark():
    benchmark_data = {}
    ticker = yf.Ticker(BENCHMARK)
    benchmark_data[BENCHMARK] = ticker.history(start=start_date, end=end_date)['Close']
    return pd.DataFrame(benchmark_data)

def benchmark_statistics(benchmark_prices):
    bench_log_returns = np.log(benchmark_prices / benchmark_prices.shift(1)).dropna()
    bench_log_return = bench_log_returns.mean() * 252
    bench_volatility = np.sqrt(bench_log_returns.var() * 252)
    bench_arithmetic_return = np.exp(bench_log_return) - 1
    bench_sharpe_ratio = (bench_arithmetic_return - RISK_FREE_RATE) / bench_volatility
    return np.array([bench_arithmetic_return, bench_volatility, bench_sharpe_ratio])

def min_function_sharpe(weights, returns):
    return -statistics(weights, returns)[2]

def optimize_portfolio(weights, returns):
    constraints = {'type': 'eq', 'fun': lambda x: np.sum(x) - 1}
    bounds = tuple((0, CAP) for _ in range(len(stocks)))
    return optimization.minimize(fun=min_function_sharpe, x0=weights[0], args=returns, method='SLSQP', bounds=bounds, constraints=constraints)

def min_function_volatility(weights, returns):
    return statistics(weights, returns)[1]

def optimize_min_variance(weights, returns):
    constraints = {'type': 'eq', 'fun' : lambda x : np.sum(x) -1}
    bounds = tuple((0,CAP) for _ in range(len(stocks)))
    return optimization.minimize(fun = min_function_volatility, x0 = weights[0], args = returns, method = 'SLSQP', bounds = bounds, constraints = constraints)

def print_details(optimum, min_var, returns, benchmark_prices):
    print("Optimal Portfolio:", optimum['x'].round(2))
    print("Expected Optimal Portfolio Return, Volatility and Sharpe Ratio:", statistics(optimum['x'].round(2), returns))

    print("Minimum Variance Portfolio:", min_var['x'].round(2))
    print("Expected Minimum Variance Portfolio Return, Volatility and Sharpe Ratio:", statistics(min_var['x'], returns))

    bench_stats = benchmark_statistics(benchmark_prices[BENCHMARK])
    print(f"Benchmark Return, Volatility and Sharpe Ratio ({BENCHMARK}):", bench_stats)

def show_portfolio_plot(opt, min_var, rets, portfolio_vols, portfolio_rets, benchmark_prices):
    colors = [(0, "midnightblue"),(0.1, "darkblue"),(0.2, "blue"),(0.4, "cyan"),(0.45, "aquamarine"),(0.5, "lime"),(0.55, "yellow"),(0.6, "orange"),(0.8, "red"),(0.9, "darkred"),(1, "maroon")]
    cmap = LinearSegmentedColormap.from_list("colors", colors)
    plt.figure(figsize=(10, 6))
    plt.scatter(portfolio_vols, portfolio_rets, c = portfolio_rets/portfolio_vols, cmap = cmap, marker = 'o', edgecolor = 'black')
    plt.grid(True)
    plt.xlabel('Expected Volatility')
    plt.ylabel('Expected Return')
    plt.colorbar(label = 'Sharpe Ratio')

    opt_stats = statistics(opt['x'], rets)
    plt.plot(opt_stats[1], opt_stats[0], 'g*', markersize = 20, label = "Optimal Portfolio")

    min_var_stats = statistics(min_var['x'], rets)
    plt.plot(min_var_stats[1], min_var_stats[0], 'mv', markersize = 12, label = "Minimum Variance Portfolio")

    bench_stats = benchmark_statistics(benchmark_prices[BENCHMARK])
    plt.plot(bench_stats[1], bench_stats[0], 'r^', markersize = 12, label = f"Benchmark ({BENCHMARK})")

    plt.legend()
    plt.show()

if __name__ == '__main__':

    dataset = download_data()
    show_data(dataset)

    log_daily_returns = calculate_return(dataset)

    pweights, means, risks = generate_portfolio(log_daily_returns)
    show_portfolios(risks, means)

    optimum = optimize_portfolio(pweights, log_daily_returns)

    min_var = optimize_min_variance(pweights, log_daily_returns)

    benchmark_prices = download_data_benchmark()

    print_details(optimum, min_var, log_daily_returns, benchmark_prices)

    show_portfolio_plot(optimum, min_var, log_daily_returns, risks, means, benchmark_prices)
